library(lme4)
# Use a nicer theme
theme_set(theme_classic())
df$stimulus_face <- relevel(factor(df$stimulus_face), ref="south asian")
m1 <- lm(accuracy ~ diverse * stimulus_voice * stimulus_face,
REML = F,
data=df)
summary(m1)
# Import all libraries
library("knitr")
library("GGally")
library("janitor")
library("tidyverse")
library(lme4)
# Use a nicer theme
theme_set(theme_classic())
df$stimulus_face <- relevel(factor(df$stimulus_face), ref="south asian")
m1 <- lmer(accuracy ~ diverse * stimulus_voice * stimulus_face + (1 | subject_id),
REML = F,
data=df)
summary(m1)
df <- df %>% mutate(df = sub("_.*", "", stimulus_voice)) %>% unite(df, stimulus_face, col=voice_face, sep+" ", remove=FALSE) %>% select(-df)
df <- df %>% mutate(df = sub("_.*", "", stimulus_voice)) %>% unite(df, stimulus_face, col=voice_face, sep = " ", remove=FALSE) %>% select(-df)
head(df)
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~condition, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion")
plot
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "black") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion")
plot
show(plot)
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion")
show(plot)
show(plot)
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face, ylim = (0,1.0))) + geom_violin(trim = FALSE, alpha = 0.5) +
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion") +  ylim = (0,1.0)
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.1, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion") +  ylim(0,1.0)
show(plot)
show(plot)
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion") +  ylim(-0.2,1.2)
show(plot)
show(plot)
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.1) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion") +  ylim(0,1)
show(plot)
show(plot)
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = TRUE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion") +  ylim(0,1)
show(plot)
show(plot)
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion")
show(plot)
show(plot)
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 30, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(plot)
show(plot)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(plot)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, scales = "free_x") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(x = "voice face pairing", y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(plot)
labs(x = "voice face pairing", y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
labs(x = "voice face pairing", y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, labeller = as_labeller(
c("less" = "Racially Less Diverse",
"more" = "Racially More Diverse"))) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(x = "voice face pairing", y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(plot)
### Data Preparation
#### Load Relevant Libraries and Functions
library(stringr)
library (stringdist)
library(dplyr)
library (readr)
#### Import data
df <- read_csv("ling245b_data.csv")
calculate_similarity <- function(actual, response, max_dist = 1) {
# Clean and split into words
clean_text <- function(text) {
text %>%
tolower() %>%
str_remove_all("[^a-zA-Z ]") %>%  # Keep letters and spaces
str_squish() %>%
str_split(" +") %>%
unlist()
}
actual_words <- clean_text(actual)
response_words <- clean_text(response)
if(length(actual_words) == 0) return(NA_real_)
# Track matches while avoiding double-counting
matches <- 0
remaining_response <- response_words
for(word in actual_words) {
if(length(remaining_response) == 0) break
distances <- stringdist::stringdist(word, remaining_response, method = "lv")
# Handle empty distances and NA values
if(length(distances) == 0 || all(is.na(distances))) next
min_dist <- min(distances, na.rm = TRUE)
# Add validity check for min_dist
if(!is.na(min_dist) && min_dist <= max_dist) {
matches <- matches + 1
remaining_response <- remaining_response[-which.min(distances)]
}
}
# Return both strict accuracy and similarity percentage
list(
accuracy = matches / length(actual_words),
similarity = matches / max(length(actual_words), length(response_words))
)
}
# Apply to dataframe
df <- df %>%
mutate(
actual = as.character(actual_sentence),
response = as.character(subject_response)
) %>%
rowwise() %>%
mutate(
accuracy = calculate_similarity(actual, response)$accuracy
) %>%
ungroup()
df$subject_response_unfixed <- NULL
df <- df %>% mutate(df = sub("_.*", "", stimulus_face)) %>% unite(df, stimulus_voice, col=face_voice, sep = " ", remove=FALSE) %>% select(-df)
head(df)
# Import all libraries
library("knitr")
library("GGally")
library("janitor")
library("tidyverse")
library(lme4)
# Use a nicer theme
theme_set(theme_classic())
df$stimulus_face <- relevel(factor(df$stimulus_face), ref="south asian")
m1 <- lmer(accuracy ~ diverse * stimulus_voice * stimulus_face + (1 | subject_id),
REML = F,
data=df)
m2 <- lm(accuracy ~ diverse * stimulus_voice * stimulus_face,
REML = F,
data=df)
summary(m1)
summary(m2)
library(ggplot2)
plot <- ggplot(data=df, aes(x=voice_face, y= accuracy, fill=voice_face)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, labeller = as_labeller(
c("less" = "Racially Less Diverse",
"more" = "Racially More Diverse"))) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(plot)
library(ggplot2)
plot <- ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.7) +
facet_wrap(~diverse, labeller = as_labeller(
c("less" = "Racially Less Diverse",
"more" = "Racially More Diverse"))) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(plot)
show(plot)
plot <- ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.2) +
facet_wrap(~diverse, labeller = as_labeller(
c("less" = "Racially Less Diverse",
"more" = "Racially More Diverse"))) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(plot)
ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
p <- ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.2) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(p)
show(p)
plot <- ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.2, color = "match") +
facet_wrap(~diverse, labeller = as_labeller(
c("less" = "Racially Less Diverse",
"more" = "Racially More Diverse"))) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(plot)
plot <- ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.2, color = "white") +
facet_wrap(~diverse, labeller = as_labeller(
c("less" = "Racially Less Diverse",
"more" = "Racially More Diverse"))) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(plot)
p_ungrouped <- ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.2, color = "white") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(p_ungrouped)
p_ungrouped <- ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.2, color = "white") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1)) + ggtitle("Proportions Ungrouped by Network Diversity")
show(p_ungrouped)
plot <- ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.2, color = "white") +
facet_wrap(~diverse, labeller = as_labeller(
c("less" = "Racially Less Diverse",
"more" = "Racially More Diverse"))) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(plot)
p_ungrouped <- ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.1, size = 1, alpha = 0.2, color = "white") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1)) + ggtitle("Proportions Ungrouped by Network Diversity")
show(p_ungrouped)
show(p_ungrouped)
p_ungrouped <- ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.3, size = 1, alpha = 0.2, color = "white") +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1)) + ggtitle("Proportions Ungrouped by Network Diversity")
show(p_ungrouped)
show(p_ungrouped)
plot <- ggplot(data=df, aes(x=face_voice, y= accuracy, fill=face_voice)) + geom_violin(trim = FALSE, alpha = 0.5) +
geom_boxplot(width = 0.2, outlier.shape = NA, color = "white") +
geom_jitter(width = 0.3, size = 1, alpha = 0.2, color = "white") +
facet_wrap(~diverse, labeller = as_labeller(
c("less" = "Racially Less Diverse",
"more" = "Racially More Diverse"))) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none"
) +
labs(x = NULL, y = "proportion") + scale_y_continuous(breaks = seq(0, 1.0, by = .1))
show(plot)
anova(m1, m2)
simple <- lmer(accuracy ~ stimulus_voice + (1 | subject_id))
simple <- lmer(accuracy ~ stimulus_voice + (1 | subject_id), REML = F,
data=df)
complex_1 <- lmer(accuracy ~ stimulus_voice * diverse + (1 | subject_id), REML = F,
data=df)
complex_2 <- lmer(accuracy ~ stimulus_voice * stimulus_face + (1 | subject_id), REML = F,
data=df)
#likelihood ratio testing by complexity of model
anova(simple, complex_1)
anova(complex_1, complex_2)
anova(complex_2, m2)
# likelihood ratio testing of mixed effects vs. linear mixed effects
anova(m1, m2)
#likelihood ratio testing by complexity of model
anova(simple, complex_1)
anova(complex_1, complex_2)
anova(complex_2, m2)
# likelihood ratio testing of mixed effects vs. linear mixed effects
anova(m1, m2)
#likelihood ratio testing by complexity of model
anova(simple, complex_1)
anova(complex_1, complex_2)
anova(complex_2, m2)
### Data Preparation
#### Load Relevant Libraries and Functions
library(stringr)
library (stringdist)
library(dplyr)
library (readr)
library("knitr")
library("GGally")
library("janitor")
library("tidyverse")
library(lme4)
library(ggplot2)
#### Import data
df <- read_csv("ling245b_data.csv")
calculate_similarity <- function(actual, response, max_dist = 1) {
# Clean and split into words
clean_text <- function(text) {
text %>%
tolower() %>%
str_remove_all("[^a-zA-Z ]") %>%  # Keep letters and spaces
str_squish() %>%
str_split(" +") %>%
unlist()
}
actual_words <- clean_text(actual)
response_words <- clean_text(response)
if(length(actual_words) == 0) return(NA_real_)
# Track matches while avoiding double-counting
matches <- 0
remaining_response <- response_words
for(word in actual_words) {
if(length(remaining_response) == 0) break
distances <- stringdist::stringdist(word, remaining_response, method = "lv")
# Handle empty distances and NA values
if(length(distances) == 0 || all(is.na(distances))) next
min_dist <- min(distances, na.rm = TRUE)
# Add validity check for min_dist
if(!is.na(min_dist) && min_dist <= max_dist) {
matches <- matches + 1
remaining_response <- remaining_response[-which.min(distances)]
}
}
# Return both strict accuracy and similarity percentage
list(
accuracy = matches / length(actual_words),
similarity = matches / max(length(actual_words), length(response_words))
)
}
# Apply to dataframe
df <- df %>%
mutate(
actual = as.character(actual_sentence),
response = as.character(subject_response)
) %>%
rowwise() %>%
mutate(
accuracy = calculate_similarity(actual, response)$accuracy
) %>%
ungroup()
df$subject_response_unfixed <- NULL
df <- df %>% mutate(df = sub("_.*", "", stimulus_face)) %>% unite(df, stimulus_voice, col=face_voice, sep = " ", remove=FALSE) %>% select(-df)
head(df)
theme_set(theme_classic())
df$stimulus_face <- relevel(factor(df$stimulus_face), ref="south asian")
m1 <- lmer(accuracy ~ diverse * stimulus_voice * stimulus_face + (1 | subject_id) + (1 | stimulus) + (1 | `face shown`),
REML = F,
data=df)
summary(m1)
summary(m1)
